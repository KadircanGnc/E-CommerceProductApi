@page "/"
@using Blazored.SessionStorage
@using Common.DTOs.Category

@inject NavigationManager Navigation
@inject CartService CartService
@inject ProductService ProductService
@inject HttpClient Http
@inject CategoryService CategoryService
@inject IJSRuntime JS
@inject ISessionStorageService sessionStorage


<PageTitle>Welcome to Shop</PageTitle>

<!-- Product Section Begin -->
<section class="product spad">
    <div class="container">
        <div class="row">
            <div class="col-lg-3 col-md-5">
                <div class="sidebar">
                    <div class="sidebar__item">
                        <h4>Categories</h4>
                        <ul>
                            @foreach (var category in categories)
                            {
                                <li><a href="/" @onclick="() => FilterByCategory(category.Id)">@category.Name</a></li>
                            }                           
                        </ul>
                    </div>                                   
                    
                    
                </div>
            </div>
            <div class="col-lg-9 col-md-7">
                
                <div class="align-content-lg-end">
                    <div class="hero__search">
                        <div class="hero__search__form w-100">
                            <form @onsubmit = "SearchProducts">                                
                                <input type="text" placeholder="What are you looking for?" @bind = "searchTerm">
                                <button type="submit" class="site-btn">SEARCH</button>
                            </form>
                        </div>
                        
                    </div>
                </div>

                <div class="filter__item">
                    <div class="row">
                        @* <div class="col-lg-4 col-md-5">
                            <div class="filter__sort">
                                <span>Sort By</span>
                                <select>
                                    <option value="0">Default</option>
                                    <option value="1">Price</option>
                                    <option value="2">Name</option>
                                </select>
                            </div>
                        </div> *@
                        <div class="col-lg-4 col-md-4">
                            <div class="filter__found">
                                <h6><span>@totalProductCount</span> Products found</h6>
                            </div>
                        </div>
                        
                    </div>
                </div>
                <!-- Product Items -->
                <div class="row">

                    @if(products != null)
                    {

                        @foreach (var product in products!)
                        {
                            <div class="col-lg-4 col-md-6 col-sm-6">
                                <div class="product__item">
                                    <div class="product__item__pic set-bg" style="background-image: url('@product.ImageUrl')" >
                                        <ul class="product__item__pic__hover">
                                            <li><a href="#"><i class="fa fa-heart" @onclick="() => NavigateToDetails(product.Id)"></i> <span></span></a></li>
                                            <li><a href="/" @onclick="() => HandleAddToCart(product.Id)"><i class="fa fa-shopping-cart"></i></a></li>
                                        </ul>
                                    </div>
                                    <div class="product__item__text">
                                        <h6><a href="#">@product.Name</a></h6>
                                        <h5>TRY @product.Price</h5>
                                    </div>
                                </div>
                            </div>
                        }
                    }

                    else
                    {
                        <div class="alert alert-danger" role="alert">
                            No product found
                        </div>
                    }

                </div>

                <!-- Pagination -->
                <div class="row">
                    <div class="col-lg-12">
                        <nav aria-label="Page navigation example">
                            <ul class="pagination justify-content-center">
                                <!-- Previous Button -->
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="PreviousPage">Previous</button>
                                </li>

                                <!-- Page Numbers -->
                                @for (int i = 1; i <= totalPages; i++)
                                {
                                    int pageNumber = i;
                                    <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                        <button class="page-link" @onclick="@(async () => await GoToPage(pageNumber))">@pageNumber</button>
                                    </li>
                                }

                                <!-- Next Button -->
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="NextPage">Next</button>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>                
    </div>        
</section>
<!-- Product Section End -->

@code
{
    public List<CartItemDTO> cartItems = new List<CartItemDTO>();
    public List<GetCategoryDTO> categories = new List<GetCategoryDTO>();
    private List<GetProductDTO> products = new List<GetProductDTO>();
    private int currentPage = 1;
    private int totalPages, totalProductCount;
    private const int pageSize = 10;    
    public int itemCount = 0;
    private int selectedCategoryId = 0;
    private string searchTerm = "";
    private bool isSearching = false;
    string token = "";

    public void NavigateToDetails(int productId)
    {
        Navigation.NavigateTo($"/details/{productId}");
    }

    protected override async Task OnInitializedAsync()
    {                
        try
        {            
            categories = await CategoryService.GetCategories();
            await LoadProducts();            
            StateHasChanged();            
        }
        catch (Exception ex)
        {
            // Log exception or handle error
            Console.WriteLine(ex.Message);
        }

    }     

    private async Task SearchProducts()
    {
        currentPage = 1; // Reset to the first page for new search
        isSearching = true; // Indicate we're searching
        selectedCategoryId = 0; // Clear category filter
        await LoadProducts();// Force UI update
    }

    private async Task LoadProducts()
    {
        try
        {
            PagedResult<GetProductDTO> pagedResult;

            if (isSearching && !string.IsNullOrEmpty(searchTerm)) // If searching
            {
                pagedResult = await ProductService.SearchProductsWithPagination(searchTerm, currentPage, pageSize);
            }
            else if (selectedCategoryId > 0) // If filtering by category
            {
                pagedResult = await ProductService.GetPagedProductsByCategory(selectedCategoryId, currentPage, pageSize);
            }
            else // Default product load
            {
                pagedResult = await ProductService.GetPagedProducts(currentPage, pageSize);
            }

            products = pagedResult.Items;
            totalProductCount = pagedResult.TotalItems;
            totalPages = (int)Math.Ceiling((double)pagedResult.TotalItems / pageSize);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadProducts();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadProducts();
        }
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadProducts();
        }
    }

    private async Task FilterByCategory(int categoryId)
    {
        currentPage = 1; // Reset to the first page for new category filter
        selectedCategoryId = categoryId; // Update selected category
        isSearching = false; // Indicate we're not searching
        await LoadProducts();
    }

    private async Task<string> GetAuthToken()
    {
        token = await sessionStorage.GetItemAsync<string>("authToken");
        return await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
    }

    private async Task HandleAddToCart(int productId)
    {
        var itemCount = await sessionStorage.GetItemAsync<int>("cartItemCount");
        // var itemCountStr = await JS.InvokeAsync<string>("sessionStorage.getItem", "cartItemCount");
        // itemCount = Convert.ToInt16(itemCountStr);
        var IdList = new List<int>();
        IdList.Add(productId);
        token = await GetAuthToken();
        if (string.IsNullOrEmpty(token))
        {
            // Redirect to login page if not logged in
            Navigation.NavigateTo("/login");
        }
        else
        {
            // Logic to add product to cart
            await CartService.AddToCartAsync(token, IdList);
            itemCount++;
            await sessionStorage.SetItemAsync("cartItemCount", itemCount);
            // await JS.InvokeVoidAsync("sessionStorage.setItem", "cartItemCount", itemCount);
            // Optionally refresh cart or provide feedback
            StateHasChanged();
        }
    }
}
