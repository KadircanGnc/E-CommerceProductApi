@page "/cart"

@inject CartService cartService;
@inject IJSRuntime JS

<!-- Shoping Cart Section Begin -->
<section class="shoping-cart spad">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="shoping__cart__table">
                    <table>
                        <thead>
                            <tr>
                                <th class="shoping__product">Products</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>Total</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in cartItems)
                            {
                                <tr>
                                    <td class="shoping__cart__item">
                                        <img src="@item.ImageUrl" alt="@item.ProductName">
                                        <h5>@item.ProductName</h5>
                                    </td>
                                    <td class="shoping__cart__price">
                                        TRY @item.Price
                                    </td>
                                    <td class="shoping__cart__quantity">
                                        <div class="quantity">
                                            <div class="pro-qty">
                                                <input type="text" value="@item.Quantity" readonly />
                                            </div>
                                        </div>
                                    </td>
                                    <td class="shoping__cart__total">
                                        TRY @(item.Price * item.Quantity)
                                    </td>
                                    <td class="shoping__cart__item__close">
                                        <span class="icon_close" @onclick="() => RemoveFromCart(item.ProductId)"></span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="shoping__cart__btns">
                    <a href="#" class="primary-btn cart-btn">CONTINUE SHOPPING</a>
                    
                </div>
            </div>
            
            <div class="col-lg-6">
                <div class="shoping__checkout">
                    <h5>Cart Total</h5>
                    <ul>
                        <li>Subtotal <span>TRY @cartItems.Sum(item => item.Price * item.Quantity)</span></li>
                        <li>Total <span>TRY @cartItems.Sum(item => item.Price * item.Quantity)</span></li>
                    </ul>
                    <a href="/checkout" class="primary-btn">PROCEED TO CHECKOUT</a>
                </div>
                
            </div>
        </div>
    </div>
</section>
<!-- Shoping Cart Section End -->

@code {

    string token = "";
    List<CartItemDTO> cartItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCartDetails();
    }

    private async Task LoadCartDetails()
    {
        token = await GetAuthToken();
        cartItems = await cartService.GetCartDetailsAsync(token);
    }

    private async Task<string> GetAuthToken()
    {
        return await JS.InvokeAsync<string>("sessionStorage.getItem", "authToken");
    }

    private async Task RemoveFromCart(int productId)
    {
        List<int> itemIds = new List<int>();
        itemIds.Add(productId);
        await cartService.RemoveFromCartAsync(token, itemIds);
        await LoadCartDetails(); // Refresh cart after removal
    }

}
