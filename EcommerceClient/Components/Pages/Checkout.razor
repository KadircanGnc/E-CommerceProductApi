@page "/checkout"
@using Blazored.SessionStorage

@inject CheckoutService checkoutService
@inject CartService cartService
@inject NavigationManager Navigation
@inject ISessionStorageService sessionStorage

<!-- Checkout Section Begin -->
<section class="checkout spad">
    <div class="container">
        <div class="row">
            <!-- Payment Details Section -->
            <div class="col-lg-8 col-md-12">
                <div class="checkout__form">
                    <h4>Payment Details</h4>
                    <EditForm Model="@creditCard" OnValidSubmit="CreateOrder">
                        <DataAnnotationsValidator />
                        @* <ValidationSummary /> *@

                        <div class="checkout__input">
                            <p>Card Holder Name<span>*</span></p>
                            <InputText @bind-Value="creditCard.CardHolderName" class="form-control" />
                            <ValidationMessage For="@(() => creditCard.CardHolderName)" />
                        </div>

                        <div class="checkout__input">
                            <p>Card Number<span>*</span></p>
                            <InputText @bind-Value="creditCard.CardNumber" class="form-control" maxlength="19" placeholder="1234 5678 9123 4567" />
                            <ValidationMessage For="@(() => creditCard.CardNumber)" />
                        </div>

                        <div class="row">
                            <div class="col-lg-6">
                                <div class="checkout__input">
                                    <p>Expire Month<span>*</span></p>
                                    <InputText @bind-Value="creditCard.ExpireMonth" class="form-control" placeholder="MM" maxlength="2" />
                                    <ValidationMessage For="@(() => creditCard.ExpireMonth)" />
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="checkout__input">
                                    <p>Expire Year<span>*</span></p>
                                    <InputText @bind-Value="creditCard.ExpireYear" class="form-control" placeholder="YYYY" maxlength="4" />
                                    <ValidationMessage For="@(() => creditCard.ExpireYear)" />
                                </div>
                            </div>
                        </div>

                        <div class="checkout__input">
                            <p>CVC<span>*</span></p>
                            <InputText @bind-Value="creditCard.Cvc" class="form-control" placeholder="123" maxlength="3" />
                            <ValidationMessage For="@(() => creditCard.Cvc)" />
                        </div>

                        <!-- Place Order Button -->
                        <button type="submit" class="site-btn">PLACE ORDER</button>
                    </EditForm>
                </div>
            </div>

            <!-- Order Summary Section -->
            <div class="col-lg-4 col-md-6">
                <div class="checkout__order">
                    <h4>Your Order</h4>
                    <div class="checkout__order__products">Products <span>Total</span></div>
                    <ul>
                        @foreach (var item in cartItems)
                        {
                            <li>@item.ProductName x (@item.Quantity) <span>@item.Price.ToString("C")</span></li>
                        }
                    </ul>
                    <div class="checkout__order__total">Total <span>TRY @totalPrice</span></div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Checkout Section End -->

@code {
    string token = "";
    CreditCardDTO creditCard = new CreditCardDTO();
    List<CartItemDTO> cartItems = new();
    decimal totalPrice = 0;

    private async Task<string> GetAuthToken()
    {
        return await sessionStorage.GetItemAsync<string>("authToken");        
    }

    protected override async Task OnInitializedAsync()
    {
        token = await GetAuthToken();
        await GetCart();
    }

    private async Task CreateOrder()
    {
        var result = await checkoutService.PlaceOrder(token, creditCard);

        if (result) 
        {                        
            Navigation.NavigateTo("/?orderSuccess=true");
            StateHasChanged();
        }        
    }

    private async Task GetCart()
    {        
        cartItems = await cartService.GetCartDetailsAsync(token!);
        totalPrice = cartItems.Sum(ci => ci.Price * ci.Quantity);
    }   
}
