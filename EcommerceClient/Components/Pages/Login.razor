@page "/login"
@using System.ComponentModel.DataAnnotations
@using Blazored.SessionStorage
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject ISessionStorageService sessionStorage

<PageTitle>Login</PageTitle>

<section class="login-section">
    <div class="container">
        <div class="login-form m-auto">
            <h3>Login</h3>
            <EditForm Model="@loginModel" class="py-3" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                @* <ValidationSummary /> *@

                <div class="form-group">
                    <label for="email">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <button type="submit" class="btn btn-primary w-100">Login</button>
            </EditForm>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }
        </div>
    </div>
</section>


@code {
    private LoginModel loginModel = new LoginModel();
    private string? errorMessage;    

    protected override void OnInitialized()
    {

    }

    private async Task HandleLogin()
    {
        try
        {
            var response = await AuthService.LoginAsync(loginModel.Email!, loginModel.Password!);

            if (response != null && !string.IsNullOrEmpty(response.ToString()))
            {
                // Save the token in session storage
                await sessionStorage.SetItemAsync("authToken", response.Token);
                await sessionStorage.SetItemAsync("email", loginModel.Email);                
                // Navigate to homepage       
                await AuthService.IsLoggedInAsync();
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
        }
    }

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string? Email { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string? Password { get; set; }
    }
}
