@page "/"

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor

<link href="css/login.css" rel="stylesheet" />

<div class="login-page">
    <div class="login-card">
        <h3>Login</h3>
        <EditForm EditContext="@editContext" OnValidSubmit="HandleLogin" FormName="Credentials" >
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="@email" class="form-control" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" @bind-Value="@password" class="form-control" type="password" />
            </div>
            <button @onclick="HandleLogin" class="btn btn-primary">Login</button>
            <p class="text-danger">@errorMessage</p>
            
        </EditForm>
    </div>
    <div class="background-green"></div>

    
</div>


@code {
    private string email = "";
    private string password = "";
    private string errorMessage = "";    

    private EditContext? editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(this);
    }

    private async Task HandleLogin()
    {
        if (string.IsNullOrEmpty(email) || string.IsNullOrEmpty(password))
        {
            errorMessage = "Email and password cannot be empty.";
            return;
        }
        var requestUri = $"Authentication?email={Uri.EscapeDataString(email)}&password={Uri.EscapeDataString(password)}";
        var response = await Http.PostAsync(requestUri, null); // No body required for GET requests

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<TokenResponse>();
            if (result != null)
            {
                var token = result.Token!;
                // Redirect to another page
                Navigation.NavigateTo($"/home?token={Uri.EscapeDataString(token)}");
            }
        }
        else
        {
            errorMessage = "Invalid email or password.";
        }
    }
    public class TokenResponse
    {
        public string? Token { get; set; }
    }
}
