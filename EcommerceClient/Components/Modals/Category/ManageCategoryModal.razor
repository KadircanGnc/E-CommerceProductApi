@using Common.DTOs.Category

@inject CategoryService categoryService

<div class="modal fade" id="manageCategoryModal" tabindex="-1" aria-labelledby="manageCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog" style="max-width: 80%; width: auto;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="manageCategoryModalLabel">Manage Categories</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">X</button>
            </div>
            @if (isCategoryUpdated)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @alertMessage
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="DismissAlert"></button>
                </div>
            }
            @if (isCategoryDeleted)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    @alertMessage
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="DismissAlert"></button>
                </div>
            }
            <div class="modal-body">
                @if (categories == null)
                {
                    <p>Loading Categories...</p>
                }
                else if (categories.Count == 0)
                {
                    <p>No categories found.</p>
                }
                else
                {
                    @if (isEditing)
                    {
                        <h5>Edit Category</h5>
                        <EditForm Model="selectedCategory" OnValidSubmit="HandleEditSubmit">
                            <DataAnnotationsValidator />

                            <div class="mb-3">
                                <label for="editName" class="form-label">Name</label>
                                <InputText id="editName" class="form-control" @bind-Value="selectedCategory.Name" />
                                <ValidationMessage For="@(() => selectedCategory.Name)" />
                            </div>                           

                            <button type="submit" class="btn btn-primary">Save Changes</button>
                            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </EditForm>
                    }
                    else
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Name</th>                                    
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var category in categories)
                                {
                                    <tr>
                                        <td>@category.Id</td>
                                        <td>@category.Name</td>                                        
                                        <td>
                                            <button class="btn btn-warning btn-sm" @onclick="() => OpenEdit(category)">Edit</button>
                                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteSelected(category.Id)">Delete</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<UpdateCategoryDTO> categories = new();
    private UpdateCategoryDTO selectedCategory = new UpdateCategoryDTO();
    private bool isEditing = false;
    private bool isCategoryDeleted = false;
    private bool isCategoryUpdated = false;
    private string alertMessage = "";

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryService.GetCategories(); // Fetch all
    }

    private void OpenEdit(UpdateCategoryDTO category)
    {
        selectedCategory = category;
        isEditing = true; // Show the edit form
    }

    private async Task DeleteSelected(int id)
    {
        var response = await categoryService.Delete(id);
        if (response.IsSuccessStatusCode)
        {
            isCategoryDeleted = true;
            alertMessage = "Category deleted successfully!";

            categories = await categoryService.GetCategories();
            StateHasChanged();
        }
    }

    private async Task HandleEditSubmit()
    {
        var response = await categoryService.Update(selectedCategory);
        if (response.IsSuccessStatusCode)
        {
            isCategoryUpdated = true;
            alertMessage = "Category Updated succesfully!";
            categories = await categoryService.GetCategories(); // Refresh
            isEditing = false; // Close the edit form
            selectedCategory = new UpdateCategoryDTO(); // Reset
            StateHasChanged();
        }
    }

    private void CancelEdit()
    {
        isEditing = false; // Close the edit form without saving
        selectedCategory = new UpdateCategoryDTO();
    }

    private void DismissAlert()
    {
        isCategoryDeleted = false;
        isCategoryUpdated = false;
    }
}
