@using Common.DTOs.Category

@inject CategoryService categoryService

<div class="modal fade" id="createCategoryModal" tabindex="-1" aria-labelledby="categoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="categoryModalLabel">Add New Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">X</button>
            </div>
            <div class="modal-body">
                @if (isCategoryCreated)
                {
                    <div class="alert alert-success" role="alert">
                        Category created successfully!
                    </div>
                }
                <EditForm Model="newCategory" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="newCategory.Name" />
                        <ValidationMessage For="@(() => newCategory.Name)" />
                    </div>                    

                    <button type="submit" class="btn btn-primary">Add Category</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    private CreateCategoryDTO newCategory = new CreateCategoryDTO();
    private bool isCategoryCreated = false; // Flag to show success message

    private async Task HandleValidSubmit()
    {
        // Post the user to the backend API
        var response = await categoryService.Create(newCategory);
        if (response.IsSuccessStatusCode)
        {
            isCategoryCreated = true;
            newCategory = new CreateCategoryDTO();

            StateHasChanged();
        }
        StateHasChanged();
    }
}
