@using Common.DTOs.Product

@inject ProductService productService

<div class="modal fade" id="createProductModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productModalLabel">Add New User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">X</button>
            </div>
            <div class="modal-body">
                @if (isProductCreated)
                {
                    <div class="alert alert-success" role="alert">
                        Product created successfully!
                    </div>
                }
                <EditForm Model="newProduct" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="newProduct.Name" />
                        <ValidationMessage For="@(() => newProduct.Name)" />
                    </div>

                    <div class="mb-3">
                        <label for="price" class="form-label">Price</label>
                        <InputNumber id="price" class="form-control" @bind-Value="newProduct.Price" />
                        <ValidationMessage For="@(() => newProduct.Price)" />
                    </div>

                    <div class="mb-3">
                        <label for="stock" class="form-label">Stock</label>
                        <InputNumber id="stock" class="form-control" @bind-Value="newProduct.StockCount" />
                        <ValidationMessage For="@(() => newProduct.StockCount)" />
                    </div>

                    <div class="mb-3">
                        <label for="category" class="form-label">Category ID</label>
                        <InputNumber id="category" class="form-control" @bind-Value="newProduct.CategoryId" />
                        <ValidationMessage For="@(() => newProduct.CategoryId)" />
                    </div>

                    <div class="mb-3">
                        <label for="brand" class="form-label">Brand ID</label>
                        <InputNumber id="brand" class="form-control" @bind-Value="newProduct.BrandId" />
                        <ValidationMessage For="@(() => newProduct.BrandId)" />
                    </div>

                    <div class="mb-3">
                        <label for="image" class="form-label">Image Url</label>
                        <InputText id="image" class="form-control" @bind-Value="newProduct.ImageUrl" />
                        <ValidationMessage For="@(() => newProduct.ImageUrl)" />
                    </div>

                    <button type="submit" class="btn btn-primary">Add Product</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    private CreateProductDTO newProduct = new CreateProductDTO();
    private bool isProductCreated = false; // Flag to show success message

    private async Task HandleValidSubmit()
    {
        // Post the user to the backend API
        var response = await productService.Create(newProduct);
        if (response.IsSuccessStatusCode)
        {
            isProductCreated = true;
            newProduct = new CreateProductDTO();

            StateHasChanged();
        }
        StateHasChanged();
    }
}
