@using Blazored.SessionStorage
@using EcommerceClient.Infrastructure.Auth
@using Microsoft.AspNetCore.Components.Authorization

@inject CartService CartService
@inject ISessionStorageService sessionStorage
@inject NavigationManager Navigation
@inject AuthService authService
@inject AuthenticationStateProvider authState

<!-- Humberger Begin -->
<div class="humberger__menu__overlay"></div>
<div class="humberger__menu__wrapper">
    <div class="humberger__menu__logo">
        <a href="/"><img src="images/logo.png" alt=""></a>
    </div>
    <div class="humberger__menu__cart">
        <ul>
            <li><a href="#"><i class="fa fa-heart"></i> <span>1</span></a></li>
            <li><a href="#"><i class="fa fa-shopping-bag"></i> <span>3</span></a></li>
        </ul>
        <div class="header__cart__price">item: <span>TRY 150.00</span></div>
        <div class="header__top__right__auth">
            <a href="#"><i class="fa fa-user"></i> Login</a>
        </div>
    </div>
    <div class="humberger__menu__widget">
        <div class="header__top__right__language">
            <img src="images/language.png" alt="">
            <div>English</div>
            <span class="arrow_carrot-down"></span>
            <ul>
                <li><a href="#">Spanis</a></li>
                <li><a href="#">English</a></li>
            </ul>
        </div>
        <div class="header__top__right__auth">
            <a href="#"><i class="fa fa-user"></i> Login</a>
        </div>
    </div>
    <nav class="humberger__menu__nav mobile-menu">
        <ul>
            <li class="active"><a href="./index.html">Home</a></li>
            <li><a href="./shop-grid.html">Shop</a></li>
            <li>
                <a href="#">Pages</a>
                <ul class="header__menu__dropdown">
                    <li><a href="./shop-details.html">Shop Details</a></li>
                    <li><a href="./shoping-cart.html">Shoping Cart</a></li>
                    <li><a href="./checkout.html">Check Out</a></li>
                    <li><a href="./blog-details.html">Blog Details</a></li>
                </ul>
            </li>
            <li><a href="./blog.html">Blog</a></li>
            <li><a href="./contact.html">Contact</a></li>
        </ul>
    </nav>
    <div id="mobile-menu-wrap"></div>
    <div class="header__top__right__social">
        <a href="#"><i class="fa fa-facebook"></i></a>
        <a href="#"><i class="fa fa-twitter"></i></a>
        <a href="#"><i class="fa fa-linkedin"></i></a>
        <a href="#"><i class="fa fa-pinterest-p"></i></a>
    </div>
    <div class="humberger__menu__contact">
        <ul>
            <li><i class="fa fa-envelope"></i> hello@colorlib.com</li>
            <li>Free Shipping for all Order of $99</li>
        </ul>
    </div>
</div>
<!-- Humberger End -->
<!-- Header Section Begin -->
<header class="header">
    
    <div class="container">
        <div class="row">
            <div class="col-lg-3 ">
                <div class="header__logo">
                    <AuthorizeView Roles="user">
                    <a href="/"><h2>K-SHOP</h2></a>
                    </AuthorizeView>
                    <AuthorizeView Roles="admin">
                        <a href="/HomeAdmin"><h2>K-ADMIN</h2></a>
                    </AuthorizeView>
                </div>
            </div>
           
            <div class="col-lg-3 offset-lg-6">
                <div class="header__cart">                    
                    <ul>                        
                        <!-- AuthorizeView: Only show this for non-admin users -->
                        <AuthorizeView Roles="user">
                            <li><a href="/Orders">My Orders</a></li>
                            <li><a href="/Cart"><i class="fa fa-shopping-bag"></i> <span>@cartItemCount</span></a></li>                            
                        </AuthorizeView>
                    </ul>                    
                    <div class="header__top__right__auth">
                        @if (isLoggedIn)
                        {
                            <span>Welcome, (@userEmail)</span>
                            <a href="/" @onclick="Logout"><i class="fa fa-sign-out"></i> Logout</a>
                        }
                        else
                        {
                            <a href="/login"><i class="fa fa-user"></i> Login</a>
                        }                        
                    </div>
                </div>
            </div>
        </div>
        <div class="humberger__open">
            <i class="fa fa-bars"></i>
        </div>
    </div>
</header>
<!-- Header Section End -->

@code {
    private bool isLoggedIn = false;
    private string userName = "";
    private string userEmail = "";
    private string token = "";
    private int cartItemCount = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await sessionStorage.GetItemAsync<string>("authToken");
            userEmail = await sessionStorage.GetItemAsync<string>("email");
            //Subbing to the event
            authService.isLoggedIn += LoginHandler;
            CartService.isCartChanged += CartChangeHandler;

            isLoggedIn = !string.IsNullOrEmpty(token);
            if (isLoggedIn)
            {
                cartItemCount = await CartService.GetItemCountAsync(token);
                await UpdateCartItemCount(); // Get cart count after login check
            }            
            StateHasChanged();
        }
    }

    public async Task<bool> LoginHandler()
    {
        token = await sessionStorage.GetItemAsync<string>("authToken");
        userEmail = await sessionStorage.GetItemAsync<string>("email");
        var cartItemCountStr = await sessionStorage.GetItemAsync<string>("cartItemCount");
        cartItemCount = Convert.ToInt16(cartItemCountStr);
        isLoggedIn = !string.IsNullOrEmpty(token);
        await UpdateCartItemCount();
        await authState.GetAuthenticationStateAsync();
        StateHasChanged();
        return isLoggedIn; // Return the login status
    }

    public async Task<bool> CartChangeHandler()
    {
        await UpdateCartItemCount();
        StateHasChanged();
        return true;
    }

    protected override async Task OnInitializedAsync()
    {        
        StateHasChanged();
        if (isLoggedIn)
        {
            await UpdateCartItemCount();
        }
        await authState.GetAuthenticationStateAsync();
        StateHasChanged();
    }

    private async Task Logout()
    {
        // Clear session storage and redirect to login page
        await sessionStorage.RemoveItemAsync("authToken");
        await sessionStorage.RemoveItemAsync("cartItemCount");  
        await sessionStorage.RemoveItemAsync("email");

        isLoggedIn = false;
        cartItemCount = 0;       

        var authProvider = (CustomAuthStateProvider)authState;
        authProvider.NotifyUserLogout();
        
        StateHasChanged();
        Navigation.NavigateTo("/");        
    }

    private async Task UpdateCartItemCount()
    {
        if (isLoggedIn)
        {
            cartItemCount = await CartService.GetItemCountAsync(token);
        }
        else
        {
            cartItemCount = 0; // Reset count if not logged in
        }

        await sessionStorage.SetItemAsync("cartItemCount", cartItemCount.ToString());
        StateHasChanged();
    }
    
}
